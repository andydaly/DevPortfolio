@page "/projects"
@using DevPortfolio.Models
@using DevPortfolio.Services
@inject IGitHubService GitHub
@rendermode InteractiveServer

<PageTitle>Projects</PageTitle>

<div class="container my-4">
    <header class="mb-4">
        <h1 class="mb-1">Projects</h1>
        <p class="text-muted mb-0">Click a project title (or the row) to show its README below. Use the button to open the repo on GitHub.</p>
    </header>

    @if (_loading)
    {
        <p>Loading repositories…</p>
    }
    else if (!string.IsNullOrWhiteSpace(_error))
    {
        <div class="alert alert-danger" style="white-space:pre-wrap">@_error</div>
    }
    else if (_repos?.Count == 0)
    {
        <p>No repositories found.</p>
    }
    else
    {
        <ul class="list-group">
            @foreach (var r in _repos!)
            {
                var repoName = r.Name!;
                var defaultBranch = r.DefaultBranch ?? "main";
                <li class="list-group-item" @onclick="() => ToggleReadmeAsync(repoName, defaultBranch)">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="me-3">
                            <button type="button" class="btn btn-link p-0 text-start fw-bold"
                                    @onclick="(MouseEventArgs e) => ToggleReadmeAsync(repoName, defaultBranch)">
                                @repoName
                            </button>

                            @if (!string.IsNullOrWhiteSpace(r.Description))
                            {
                                <div class="text-muted">@r.Description</div>
                            }
                            <div class="small text-muted mt-1">
                                @if (!string.IsNullOrWhiteSpace(r.Language))
                                {
                                    <span>@r.Language</span>
                                    <span> · </span>
         }
                                <span>★ @r.Stars</span><span> · </span>
                                <span>Updated @r.UpdatedAt.LocalDateTime.ToString("yyyy-MM-dd")</span>
                                @if (r.Fork)
                                {
                                    <span> · fork</span>
                                }
                            </div>
                        </div>

                        <a class="btn btn-sm btn-outline-primary"
                           href="@r.HtmlUrl"
                           target="_blank" rel="noopener"
                           @onclick="() => { }" @onclick:stopPropagation="true">
                            Open in GitHub
                        </a>
                    </div>

                    @if (_expanded.Contains(repoName))
                    {
                        <div class="mt-3">
                            @if (_loadingReadmes.Contains(repoName))
                            {
                                <em>Loading README…</em>
                            }
                            else if (_readmes.TryGetValue(repoName, out var html) && !string.IsNullOrWhiteSpace(html))
                            {
                                <div class="p-3 border rounded-3 bg-light readme-body">
                                    <style>
                                        .readme-body img {
                                            max-width: 100%;
                                            height: auto;
                                        }

                                        .readme-body a.anchor,
                                        .readme-body .octicon-link {
                                            display: none !important;
                                        }
                                    </style>
                                    @((MarkupString)html)
                                </div>
                            }
                            else if (_errors.TryGetValue(repoName, out var perRepoError))
                            {
                                <div class="alert alert-warning" style="white-space:pre-wrap">@perRepoError</div>
                            }
                            else
                            {
                                <em>No README found.</em>
                            }
                        </div>
                    }
                </li>
            }
        </ul>
    }
</div>

@code {
    private List<RepoDto>? _repos;
    private string? _error;
    private bool _loading = true;

    private readonly HashSet<string> _expanded = new(StringComparer.OrdinalIgnoreCase);
    private readonly HashSet<string> _loadingReadmes = new(StringComparer.OrdinalIgnoreCase);
    private readonly Dictionary<string, string> _readmes = new(StringComparer.OrdinalIgnoreCase);
    private readonly Dictionary<string, string> _errors = new(StringComparer.OrdinalIgnoreCase);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _repos = (await GitHub.GetRecentReposAsync()).ToList();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task ToggleReadmeAsync(string repoName, string defaultBranch)
    {
        if (_expanded.Contains(repoName))
        {
            _expanded.Remove(repoName);
            StateHasChanged();
            return;
        }

        _expanded.Add(repoName);

        if (_readmes.ContainsKey(repoName) || _errors.ContainsKey(repoName))
        {
            StateHasChanged();
            return;
        }

        _loadingReadmes.Add(repoName);
        StateHasChanged();

        try
        {
            var html = await GitHub.GetReadmeHtmlAsync(repoName, defaultBranch);
            _readmes[repoName] = html ?? "<em>No README found.</em>";
        }
        catch (Exception ex)
        {
            _errors[repoName] = ex.Message;
        }
        finally
        {
            _loadingReadmes.Remove(repoName);
            StateHasChanged();
        }
    }
}