@page "/"
@rendermode InteractiveServer
@inject DevPortfolio.Services.IResumeService ResumeService
@inject DevPortfolio.Services.IGitHubService GitHub
@using DevPortfolio.Models
@inject IConfiguration Config
@inject IJSRuntime JS

<section id="home" class="hero container py-5">
    <div class="hero-card">
        <div class="photo-wrap">
            <img class="photo" src="images/avatarimage.jpg"
                 alt="Andrew Daly Avatar" loading="eager" />
        </div>

        <div class="social-strip">
            <a class="icon-btn linkedin"
               href="@(_candidate?.LinkedinUrl)"
               target="_blank" rel="noopener" aria-label="LinkedIn">
                <svg viewBox="0 0 24 24" width="28" height="28" aria-hidden="true"><path fill="currentColor" d="M20.45 20.45h-3.555v-5.57c0-1.328-.025-3.037-1.852-3.037-1.853 0-2.136 1.448-2.136 2.945v5.662H9.35V9h3.414v1.56h.049c.475-.9 1.638-1.852 3.368-1.852 3.603 0 4.267 2.372 4.267 5.458v6.284zM5.337 7.433A2.063 2.063 0 1 1 5.332 3.31a2.063 2.063 0 0 1 .005 4.123zM7.116 20.45H3.56V9h3.556v11.45z" /></svg>
            </a>

            <a class="icon-btn github"
               href="@(_candidate?.GithubUrl)"
               target="_blank" rel="noopener" aria-label="GitHub">
                <svg viewBox="0 0 24 24" width="28" height="28" aria-hidden="true"><path fill="currentColor" d="M12 .5a11.5 11.5 0 0 0-3.637 22.42c.575.105.787-.25.787-.556 0-.275-.01-1.003-.016-1.968-3.2.695-3.878-1.543-3.878-1.543-.523-1.328-1.277-1.681-1.277-1.681-1.044-.714.079-.699.079-.699 1.153.081 1.76 1.184 1.76 1.184 1.027 1.76 2.695 1.251 3.35.956.104-.744.402-1.252.731-1.541-2.555-.291-5.24-1.277-5.24-5.683 0-1.255.45-2.281 1.184-3.086-.118-.29-.513-1.462.112-3.049 0 0 .967-.31 3.17 1.178a10.98 10.98 0 0 1 2.886-.388c.98.004 1.968.132 2.892.388 2.201-1.49 3.166-1.178 3.166-1.178.628 1.587.233 2.759.115 3.049.737.805 1.183 1.83 1.183 3.086 0 4.417-2.69 5.388-5.255 5.673.413.353.78 1.047.78 2.112 0 1.526-.014 2.756-.014 3.13 0 .31.208.671.793.555A11.5 11.5 0 0 0 12 .5z" /></svg>
            </a>
        </div>
    </div>

    <div class="hero-text">
        <h1 class="headline">
            <span class="name">Andrew Daly</span>
        </h1>
        <h2 class="role">Full Stack Software Developer</h2>

        <p class="tagline">
            Building reliable, human-friendly software and tools.
        </p>

        <div class="cta">
            <a class="btn-pill primary"
               href="@ResumeUrl"
               target="_blank" rel="noopener">
                RESUME
            </a>
            @if (!string.IsNullOrWhiteSpace(MeetingUrl))
            {
                <a class="btn-pill ghost"
                    href="@MeetingUrl"
                    target="_blank" rel="noopener">
                     SCHEDULE A MEETING
                </a>
            }
            else
            {
                <button class="btn-pill ghost" type="button" disabled title="Scheduling link not configured">
                 SCHEDULE A MEETING
                </button>
                }
        </div>

        
    </div>
    <div class="to-about">
        <a href="#about" class="about-jump">About Me <span aria-hidden="true">▼</span></a>
        <a href="#projects" class="about-jump">Projects <span aria-hidden="true">▼</span></a>
    </div>
</section>

<section id="about" class="about-band">
    <div class="about-inner">
        <div class="about-grid">
            <div class="about-media">
                <img src="images/profileimage.jpg" alt="Andrew Daly profile" class="about-photo" loading="lazy" />
            </div>
            <div class="about-copy">
                <h2>About Me</h2>

                @if (_loading)
                {
                    <p class="muted">Loading…</p>
                }
                else if (!string.IsNullOrWhiteSpace(_error))
                {
                    <p class="muted">@_error</p>
                }
                else if (!string.IsNullOrWhiteSpace(_profile))
                {
                    <p class="about-text">@_profile</p>
                }
                else
                {
                    <p class="about-text">I’m a software developer who loves building practical solutions and great developer experiences.</p>
                }
            </div>
        </div>
        <div class="about-links">
            <a href="#work" class="about-jump">Work History <span aria-hidden="true">▼</span></a>
            <a href="#education" class="about-jump">Education <span aria-hidden="true">▼</span></a>
        </div>
    </div>
</section>

<section id="work" class="section-white">
    <div class="section-inner">
        <h2 class="section-title">Work History</h2>

        @if (_loading)
        {
            <p class="muted">Loading…</p>
        }
        else if (_experience is { Count: > 0 })
        {
            <div class="cards">
                @foreach (var job in _experience)
                {
                    <article class="entry reveal">
                        <header class="entry-head">
                            <h3 class="entry-title">
                                @job.Title <span class="at">• @job.Company</span>
                            </h3>
                            <div class="entry-dates">@FormatPrettyRange(job.StartDate, job.EndDate)</div>
                        </header>

                        @if (!string.IsNullOrWhiteSpace(job.Description))
                        {
                            <ul class="entry-bullets">
                                @foreach (var line in SplitLines(job.Description))
                                {
                                    var isSub = IsSectionHeading(line);
                                    if (isSub)
                                    {
                                        <li class="subhead">@line.Trim().TrimEnd(':')</li>
                                    }
                                    else
                                    {
                                        <li>@line</li>
                                    }
                                }
                            </ul>
                        }
                    </article>
                }
            </div>
        }
        else
        {
            <p class="muted">No work history found in the resume.</p>
        }
    </div>
</section>

<section id="education" class="section-white">
    <div class="section-inner">
        <h2 class="section-title">Education</h2>

        @if (_loading)
        {
            <p class="muted">Loading…</p>
        }
        else if (_education is { Count: > 0 })
        {
            <div class="cards">
                @foreach (var e in _education)
                {
                    <article class="entry reveal">
                        <header class="entry-head">
                            <h3 class="entry-title">
                                @e.Course <span class="at">• @e.Institution</span>
                            </h3>
                            <div class="entry-dates">@e.GraduationDate</div>
                        </header>

                        @if (!string.IsNullOrWhiteSpace(e.Result))
                        {
                            <p class="entry-note">Result: @e.Result</p>
                        }
                    </article>
                }
            </div>
        }
        else
        {
            <p class="muted">No education entries found in the resume.</p>
        }
    </div>
</section>

<section id="projects" class="projects-band">
    <div class="projects-inner">
        <header class="projects-head">
            <h2 class="projects-title">Projects</h2>
            <p class="projects-sub">Latest from my GitHub</p>
        </header>

        @if (_loading)
        {
            <p class="muted">Loading…</p>
        }
        else if (!string.IsNullOrWhiteSpace(_error))
        {
            <p class="muted">@_error</p>
        }
        else if (_projects is { Count: > 0 })
        {
            <div class="projects-grid">
                @foreach (var r in _projects!)
                {
                    <article class="proj-card reveal">
                        <h3 class="proj-title">
                            <a href="@r.HtmlUrl" target="_blank" rel="noopener">@r.Name</a>
                        </h3>

                        @if (!string.IsNullOrWhiteSpace(r.Description))
                        {
                            <p class="proj-desc">@r.Description</p>
                        }

                        <div class="proj-meta">
                            @if (!string.IsNullOrWhiteSpace(r.Language))
                            {
                                <span>@r.Language</span>
                    
                                <span> · </span>
                            }
                            <span>★ @r.Stars</span><span> · </span>
                            <span>Updated @r.UpdatedAt.LocalDateTime.ToString("yyyy-MM-dd")</span>
                            @if (r.Fork)
                            {
                                <span> · fork</span>
                            }
                        </div>
                    </article>
                }
            </div>
        }
        else
        {
            <p class="muted">No repositories found.</p>
        }
    </div>
</section>

<section id="contact" class="contact-band">
  <div class="contact-inner">
    <div class="contact-grid">
      <div class="contact-left">
        <div class="contact-brand">AndrewDaly</div>
        <a class="back-top" href="#home">Back to Top</a>
      </div>

      <div class="contact-right">
        <div class="contact-icons">
          <a class="icon-btn" href="@(_candidate?.LinkedinUrl)"
             target="_blank" rel="noopener" aria-label="LinkedIn">
            <svg viewBox="0 0 24 24" width="22" height="22" aria-hidden="true">
              <path fill="currentColor" d="M20.45 20.45h-3.555v-5.57c0-1.328-.025-3.037-1.852-3.037-1.853 0-2.136 1.448-2.136 2.945v5.662H9.35V9h3.414v1.56h.049c.475-.9 1.638-1.852 3.368-1.852 3.603 0 4.267 2.372 4.267 5.458v6.284zM5.337 7.433A2.063 2.063 0 1 1 5.332 3.31a2.063 2.063 0 0 1 .005 4.123zM7.116 20.45H3.56V9h3.556v11.45z"/>
            </svg>
          </a>
          <a class="icon-btn" href="@(_candidate?.GithubUrl)"
             target="_blank" rel="noopener" aria-label="GitHub">
            <svg viewBox="0 0 24 24" width="22" height="22" aria-hidden="true">
              <path fill="currentColor" d="M12 .5a11.5 11.5 0 0 0-3.637 22.42c.575.105.787-.25.787-.556 0-.275-.01-1.003-.016-1.968-3.2.695-3.878-1.543-3.878-1.543-.523-1.328-1.277-1.681-1.277-1.681-1.044-.714.079-.699.079-.699 1.153.081 1.76 1.184 1.76 1.184 1.027 1.76 2.695 1.251 3.35.956.104-.744.402-1.252.731-1.541-2.555-.291-5.24-1.277-5.24-5.683 0-1.255.45-2.281 1.184-3.086-.118-.29-.513-1.462.112-3.049 0 0 .967-.31 3.17 1.178a10.98 10.98 0 0 1 2.886-.388c.98.004 1.968.132 2.892.388 2.201-1.49 3.166-1.178 3.166-1.178.628 1.587.233 2.759.115 3.049.737.805 1.183 1.83 1.183 3.086 0 4.417-2.69 5.388-5.255 5.673.413.353.78 1.047.78 2.112 0 1.526-.014 2.756-.014 3.13 0 .31.208.671.793.555A11.5 11.5 0 0 0 12 .5z"/>
            </svg>
          </a>
        </div>

        <div class="contact-lines">
          @if (!string.IsNullOrWhiteSpace(_candidate?.Email))
          {
              <div class="contact-line"><span class="label">Email:</span> <a href="mailto:@_candidate.Email">@_candidate.Email</a></div>
          }
          @if (!string.IsNullOrWhiteSpace(_candidate?.Phone))
          {
              <div class="contact-line"><span class="label">Phone:</span> @_candidate.Phone</div>
          }
          @if (!string.IsNullOrWhiteSpace(_candidate?.PhoneOther))
          {
              <div class="contact-line"><span class="label">Phone (Other):</span> @_candidate.PhoneOther</div>
          }
        </div>
      </div>
    </div>
  </div>
</section>


@code {
    private string ResumeUrl => Config["Resume:PublicUrl"]!;
    private string? MeetingUrl => Config["Meetings:ScheduleUrl"];
    private string? _profile;
    private string? _error;
    private bool _loading = true;

    private DevPortfolio.Models.Candidate? _candidate;
    private List<DevPortfolio.Models.ExperienceItem> _experience = new();
    private List<DevPortfolio.Models.EducationItem> _education = new ();
    private List<RepoDto>? _projects;   

    private bool _observersAttached = false;
    private IJSObjectReference? _module;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var resumeTask = ResumeService.ParseAsync();
            var reposTask  = GitHub.GetReposAsync();

            await Task.WhenAll(resumeTask, reposTask);

            var dto = await resumeTask;
            _candidate = dto.Candidate;  
            _profile = dto.Profile;
            _experience = dto.Experience?.ToList() ?? new();
            _education = dto.Education?.ToList() ?? new();

            var repos = (await reposTask).OrderByDescending(r => r.UpdatedAt).ToList();

            var recentCount = Config.GetValue<int>("GitHub:RecentCount");
            if (recentCount > 0) 
                repos = repos.Take(recentCount).ToList();

            _projects = repos;
        }
        catch (Exception ex)
        {
            _error = "Could not load profile from resume: " + ex.Message;
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_observersAttached && !_loading)
        {
            _module ??= await JS.InvokeAsync<IJSObjectReference>("import", "/js/about-observer.js");
            await _module.InvokeVoidAsync("observeToggle", "about"); 
            await _module.InvokeVoidAsync("observeMany", ".reveal"); 
            _observersAttached = true;
        }
    }

    private static IEnumerable<string> SplitLines(string? text)
        => string.IsNullOrWhiteSpace(text)
            ? Array.Empty<string>()
            : text.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries)
                  .Select(s => s.Trim('•', '-', ' ', '\t'));


    private static string FormatRange(string? start, string? end)
    {
        if (string.IsNullOrWhiteSpace(start) && string.IsNullOrWhiteSpace(end)) return "";
        var e = string.IsNullOrWhiteSpace(end) || end!.Equals("present", StringComparison.OrdinalIgnoreCase)
                    ? "Present" : end!;
        return $"{start} — {e}";
    }

    private static string FormatPrettyRange(string? start, string? end)
    {
        var s = ToPrettyMonthYear(start);
        var e = ToPrettyMonthYear(end);
        if (string.IsNullOrWhiteSpace(s) && string.IsNullOrWhiteSpace(e)) return "";
        if (string.IsNullOrWhiteSpace(e)) e = "Present";
        return $"{s} — {e}";
    }

    private static string ToPrettyMonthYear(string? raw)
    {
        if (string.IsNullOrWhiteSpace(raw)) return "";
        var t = raw.Trim();

        if (t.Equals("present", StringComparison.OrdinalIgnoreCase))
            return "Present";

        var parts = t.Split('-', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2
            && int.TryParse(parts[0], out var year)
            && int.TryParse(parts[1], out var month)
            && month is >= 1 and <= 12)
        {
            return $"{MonthShort(month)} {year}";
        }

        if (int.TryParse(t, out var y)) return y.ToString();

        return t;
    }

    private static string MonthShort(int m) => m switch
    {
        1 => "Jan.",
        2 => "Feb.",
        3 => "Mar.",
        4 => "Apr.",
        5 => "May",
        6 => "June",
        7 => "July",
        8 => "Aug.",
        9 => "Sep.",
        10 => "Oct.",
        11 => "Nov.",
        12 => "Dec.",
        _ => ""
    };

    private static bool IsSectionHeading(string? s)
    {
        if (string.IsNullOrWhiteSpace(s)) return false;
        var t = s.Trim().TrimStart('•', '-', ' ', '\t');
        t = t.TrimEnd(':').Trim();
        var l = t.ToLowerInvariant();

        return l.StartsWith("key achievements")
            || l.StartsWith("technologies & skills used")
            || l.StartsWith("technologies and skills used")
            || l.StartsWith("technology & skills used")
            || l.StartsWith("technologies used")
            || l.StartsWith("skills used");
    }
}